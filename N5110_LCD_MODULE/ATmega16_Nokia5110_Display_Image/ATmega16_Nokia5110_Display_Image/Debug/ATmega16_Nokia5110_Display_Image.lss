
ATmega16_Nokia5110_Display_Image.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003f0  00800060  000001c2  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000649  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b4  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036d  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000164  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000292  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000030d  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 35       	cpi	r26, 0x50	; 80
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  7a:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <N5110_Cmnd>:
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_Disable();
}

void N5110_Data(char *DATA)
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	c1 98       	cbi	0x18, 1	; 24
  88:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_SS_Enable>
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		SPI_Write(0x00);
	}
	SPI_SS_Disable();
  8c:	8c 2f       	mov	r24, r28
}
  8e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_Write>
  92:	c1 9a       	sbi	0x18, 1	; 24
  94:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_SS_Disable>
  98:	cf 91       	pop	r28
  9a:	08 95       	ret

0000009c <N5110_Reset>:
  9c:	c0 98       	cbi	0x18, 0	; 24
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <N5110_Reset+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <N5110_Reset+0x12>
  ae:	00 00       	nop

void N5110_Reset()										/* reset the Display at the beginning of initialization */
{
	PORTB &= ~(1<<RST);
	_delay_ms(100);
	PORTB |= (1<<RST);
  b0:	c0 9a       	sbi	0x18, 0	; 24
  b2:	08 95       	ret

000000b4 <N5110_init>:
}

void N5110_init()
{
	N5110_Reset();										/* reset the display */
  b4:	0e 94 4e 00 	call	0x9c	; 0x9c <N5110_Reset>
	N5110_Cmnd(0x21);									/* command set in addition mode */
  b8:	81 e2       	ldi	r24, 0x21	; 33
  ba:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0xC0);									/* set the voltage by sending C0 means VOP = 5V */
  be:	80 ec       	ldi	r24, 0xC0	; 192
  c0:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x07);									/* set the temp. coefficient to 3 */
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x13);									/* set value of Voltage Bias System */
  ca:	83 e1       	ldi	r24, 0x13	; 19
  cc:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x20);									/* command set in basic mode */
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x0C);									/* display result in normal mode */
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
  dc:	08 95       	ret

000000de <lcd_setXY>:
}

void lcd_setXY(char x, char y)							/* set the column and row */
{
  de:	cf 93       	push	r28
  e0:	c6 2f       	mov	r28, r22
	N5110_Cmnd(x);
  e2:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(y);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <N5110_clear>:

void N5110_clear()										/* clear the Display */
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	SPI_SS_Enable();
  f4:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_SS_Enable>
	PORTB |= (1<<DC);
  f8:	c1 9a       	sbi	0x18, 1	; 24
  fa:	c8 ef       	ldi	r28, 0xF8	; 248
  fc:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		SPI_Write(0x00);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_Write>
 104:	21 97       	sbiw	r28, 0x01	; 1

void N5110_clear()										/* clear the Display */
{
	SPI_SS_Enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=503; k++)
 106:	20 97       	sbiw	r28, 0x00	; 0
 108:	d1 f7       	brne	.-12     	; 0xfe <N5110_clear+0xe>
	{
		SPI_Write(0x00);
	}
	PORTB &= ~(1<<DC);
 10a:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Disable();
 10c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_SS_Disable>
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <N5110_image>:

void N5110_image(const unsigned char *image_data)		/* clear the Display */
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	d8 2f       	mov	r29, r24
 120:	c9 2f       	mov	r28, r25
	SPI_SS_Enable();
 122:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_SS_Enable>
	PORTB |= (1<<DC);
 126:	c1 9a       	sbi	0x18, 1	; 24
 128:	0d 2f       	mov	r16, r29
 12a:	1c 2f       	mov	r17, r28
	for (int k=0; k<=503; k++)
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SPI_Write(image_data[k]);
 130:	f8 01       	movw	r30, r16
 132:	81 91       	ld	r24, Z+
 134:	8f 01       	movw	r16, r30
 136:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SPI_Write>

void N5110_image(const unsigned char *image_data)		/* clear the Display */
{
	SPI_SS_Enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=503; k++)
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	c8 3f       	cpi	r28, 0xF8	; 248
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	df 07       	cpc	r29, r31
 142:	b1 f7       	brne	.-20     	; 0x130 <N5110_image+0x1a>
	{
		SPI_Write(image_data[k]);
	}
	PORTB &= ~(1<<DC);
 144:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Disable();
 146:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_SS_Disable>
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <main>:

int main()
{
	SPI_Init();
 154:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SPI_Init>
	N5110_init();
 158:	0e 94 5a 00 	call	0xb4	; 0xb4 <N5110_init>
	N5110_clear();
 15c:	0e 94 78 00 	call	0xf0	; 0xf0 <N5110_clear>
	lcd_setXY(0x40,0x80);
 160:	60 e8       	ldi	r22, 0x80	; 128
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	0e 94 6f 00 	call	0xde	; 0xde <lcd_setXY>
	while(1)
	{
		N5110_image(Tesla_Logo);
 168:	88 e5       	ldi	r24, 0x58	; 88
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	0e 94 8b 00 	call	0x116	; 0x116 <N5110_image>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 e6       	ldi	r24, 0x69	; 105
 174:	98 e1       	ldi	r25, 0x18	; 24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x22>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x2c>
 180:	00 00       	nop
		_delay_ms(1000);
		N5110_image(Apple_Logo);
 182:	80 e6       	ldi	r24, 0x60	; 96
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 8b 00 	call	0x116	; 0x116 <N5110_image>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x3c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x46>
 19a:	00 00       	nop
 19c:	e5 cf       	rjmp	.-54     	; 0x168 <main+0x14>

0000019e <SPI_SS_Enable>:

#include "SPI_Master_H_file.h"

void SPI_SS_Enable()												/* Enable the SS pin to logic zero */		
{
	PORTB &= ~(1<<SS);
 19e:	c4 98       	cbi	0x18, 4	; 24
 1a0:	08 95       	ret

000001a2 <SPI_SS_Disable>:
}

void SPI_SS_Disable()												/* disable the SS pin to logic one */
{
	PORTB |= (1<<SS);
 1a2:	c4 9a       	sbi	0x18, 4	; 24
 1a4:	08 95       	ret

000001a6 <SPI_Init>:
}

void SPI_Init()
{
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<RST)|(1<<DC);				/* Set MOSI and SCK output, all others input */
 1a6:	83 eb       	ldi	r24, 0xB3	; 179
 1a8:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<RST);												/* define reset pin as a output */
 1aa:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1<<MISO);												/* define MISO pin as a input */
 1ac:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<SS);												/* Make SS pin as a output */
 1ae:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);							/* Enable SPE, MSTR and SPR0 bit in SPI control register */
 1b0:	81 e5       	ldi	r24, 0x51	; 81
 1b2:	8d b9       	out	0x0d, r24	; 13
 1b4:	08 95       	ret

000001b6 <SPI_Write>:
	return(SPDR);													/* Return the SPDR value */
}

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 1b6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 1b8:	77 9b       	sbis	0x0e, 7	; 14
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <SPI_Write+0x2>
}
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
