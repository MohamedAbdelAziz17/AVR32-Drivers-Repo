
ATmega16_Interfacing_to_Nokia5110.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  00000204  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000578  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000289  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000032e  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000164  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000329  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000030d  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 35       	cpi	r26, 0x50	; 80
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  7a:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <N5110_Cmnd>:
#include <string.h>
#include "SPI_Master_H_file.h"
#include "Font.h"

void N5110_Cmnd(char DATA)
{
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<DC);				/* make DC pin to logic zero for command operation */
  86:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Enable();				/* enable SS pin to slave selection */	
  88:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_SS_Enable>
	SPI_Write(DATA);				/* send data on data register */
  8c:	8c 2f       	mov	r24, r28
  8e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_Write>
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
  92:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_Disable();
  94:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SPI_SS_Disable>
}
  98:	cf 91       	pop	r28
  9a:	08 95       	ret

0000009c <N5110_Data>:

void N5110_Data(char *DATA)
{
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	6c 01       	movw	r12, r24
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
  b6:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_Enable();									/* enable SS pin to slave selection */
  b8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_SS_Enable>
	int lenan = strlen(DATA);							/* measure the length of data */
  bc:	f6 01       	movw	r30, r12
  be:	01 90       	ld	r0, Z+
  c0:	00 20       	and	r0, r0
  c2:	e9 f7       	brne	.-6      	; 0xbe <N5110_Data+0x22>
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	5f 01       	movw	r10, r30
  c8:	ac 18       	sub	r10, r12
  ca:	bd 08       	sbc	r11, r13
	for (int g=0; g<lenan; g++)
  cc:	1a 14       	cp	r1, r10
  ce:	1b 04       	cpc	r1, r11
  d0:	54 f5       	brge	.+84     	; 0x126 <N5110_Data+0x8a>
  d2:	e1 2c       	mov	r14, r1
  d4:	f1 2c       	mov	r15, r1
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
	SPI_SS_Disable();
}

void N5110_Data(char *DATA)
{
  d6:	81 2c       	mov	r8, r1
  d8:	91 2c       	mov	r9, r1
  da:	1f c0       	rjmp	.+62     	; 0x11a <N5110_Data+0x7e>
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
  dc:	f8 01       	movw	r30, r16
  de:	80 81       	ld	r24, Z
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	80 97       	sbiw	r24, 0x20	; 32
  e4:	fc 01       	movw	r30, r24
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e0 59       	subi	r30, 0x90	; 144
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	80 81       	ld	r24, Z
  fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_Write>
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_Enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	c5 30       	cpi	r28, 0x05	; 5
 104:	d1 05       	cpc	r29, r1
 106:	51 f7       	brne	.-44     	; 0xdc <N5110_Data+0x40>
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
		}
		SPI_Write(0x00);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_Write>
void N5110_Data(char *DATA)
{
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_Enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
 10e:	ff ef       	ldi	r31, 0xFF	; 255
 110:	ef 1a       	sub	r14, r31
 112:	ff 0a       	sbc	r15, r31
 114:	ae 14       	cp	r10, r14
 116:	bf 04       	cpc	r11, r15
 118:	31 f0       	breq	.+12     	; 0x126 <N5110_Data+0x8a>
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
	SPI_SS_Disable();
}

void N5110_Data(char *DATA)
{
 11a:	c8 2d       	mov	r28, r8
 11c:	d9 2d       	mov	r29, r9
 11e:	86 01       	movw	r16, r12
 120:	0e 0d       	add	r16, r14
 122:	1f 1d       	adc	r17, r15
 124:	db cf       	rjmp	.-74     	; 0xdc <N5110_Data+0x40>
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
		}
		SPI_Write(0x00);
	}							
	SPI_SS_Disable();									
 126:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SPI_SS_Disable>
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	df 90       	pop	r13
 138:	cf 90       	pop	r12
 13a:	bf 90       	pop	r11
 13c:	af 90       	pop	r10
 13e:	9f 90       	pop	r9
 140:	8f 90       	pop	r8
 142:	08 95       	ret

00000144 <N5110_Reset>:

void N5110_Reset()					/* reset the Display at the beginning of initialization */
{
	PORTB &= ~(1<<RST);
 144:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	80 e7       	ldi	r24, 0x70	; 112
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <N5110_Reset+0x8>
 154:	00 c0       	rjmp	.+0      	; 0x156 <N5110_Reset+0x12>
 156:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RST);
 158:	c0 9a       	sbi	0x18, 0	; 24
 15a:	08 95       	ret

0000015c <N5110_init>:
}

void N5110_init()
{
	N5110_Reset();					/* reset the display */
 15c:	0e 94 a2 00 	call	0x144	; 0x144 <N5110_Reset>
	N5110_Cmnd(0x21);				/* command set in addition mode */
 160:	81 e2       	ldi	r24, 0x21	; 33
 162:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0xC0);				/* set the voltage by sending C0 means VOP = 5V */
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x07);				/* set the temp. coefficient to 3 */
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x20);				/* command set in basic mode */
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(0x0C);				/* display result in normal mode */
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
 184:	08 95       	ret

00000186 <lcd_setXY>:
}

void lcd_setXY(char x, char y)		/* set the column and row */
{
 186:	cf 93       	push	r28
 188:	c6 2f       	mov	r28, r22
	N5110_Cmnd(x);
 18a:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
	N5110_Cmnd(y);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 41 00 	call	0x82	; 0x82 <N5110_Cmnd>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <N5110_clear>:

void N5110_clear()					/* clear the Display */
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	SPI_SS_Enable();
 19c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <SPI_SS_Enable>
	PORTB |= (1<<DC);
 1a0:	c1 9a       	sbi	0x18, 1	; 24
 1a2:	c8 ef       	ldi	r28, 0xF8	; 248
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		SPI_Write(0x00);		
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_Write>
 1ac:	21 97       	sbiw	r28, 0x01	; 1

void N5110_clear()					/* clear the Display */
{
	SPI_SS_Enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=503; k++)
 1ae:	20 97       	sbiw	r28, 0x00	; 0
 1b0:	d1 f7       	brne	.-12     	; 0x1a6 <N5110_clear+0xe>
	{
		SPI_Write(0x00);		
	}
	PORTB &= ~(1<<DC);
 1b2:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Disable();	
 1b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SPI_SS_Disable>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <main>:
	SPI_SS_Disable();
}

int main()
{
	SPI_Init();
 1be:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SPI_Init>
	N5110_init();
 1c2:	0e 94 ae 00 	call	0x15c	; 0x15c <N5110_init>
	N5110_clear();
 1c6:	0e 94 cc 00 	call	0x198	; 0x198 <N5110_clear>
	lcd_setXY(0x40,0x80);
 1ca:	60 e8       	ldi	r22, 0x80	; 128
 1cc:	80 e4       	ldi	r24, 0x40	; 64
 1ce:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_setXY>
	N5110_Data("ElectronicWings");
 1d2:	80 e6       	ldi	r24, 0x60	; 96
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 4e 00 	call	0x9c	; 0x9c <N5110_Data>
	while(1)	
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret

000001e0 <SPI_SS_Enable>:
 1e0:	c4 98       	cbi	0x18, 4	; 24
 1e2:	08 95       	ret

000001e4 <SPI_SS_Disable>:
 1e4:	c4 9a       	sbi	0x18, 4	; 24
 1e6:	08 95       	ret

000001e8 <SPI_Init>:
 1e8:	83 eb       	ldi	r24, 0xB3	; 179
 1ea:	87 bb       	out	0x17, r24	; 23
 1ec:	c0 9a       	sbi	0x18, 0	; 24
 1ee:	be 98       	cbi	0x17, 6	; 23
 1f0:	c4 9a       	sbi	0x18, 4	; 24
 1f2:	81 e5       	ldi	r24, 0x51	; 81
 1f4:	8d b9       	out	0x0d, r24	; 13
 1f6:	08 95       	ret

000001f8 <SPI_Write>:
 1f8:	8f b9       	out	0x0f, r24	; 15
 1fa:	77 9b       	sbis	0x0e, 7	; 14
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <SPI_Write+0x2>
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
